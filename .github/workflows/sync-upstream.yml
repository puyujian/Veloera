name: 同步上游更新并自动构建

on:
  # 定时检查上游更新（每小时检查一次）
  schedule:
    - cron: '0 * * * *'
  # 支持手动触发
  workflow_dispatch:
    inputs:
      force_sync:
        description: '强制同步（即使没有新提交）'
        required: false
        default: false
        type: boolean
      auto_build:
        description: '同步后自动构建镜像'
        required: false
        default: true
        type: boolean

jobs:
  sync-upstream:
    name: 监控并同步上游更新
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: write
      pull-requests: write
    outputs:
      has_updates: ${{ steps.check_updates.outputs.has_updates }}
      upstream_commits: ${{ steps.check_updates.outputs.upstream_commits }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 配置Git用户信息
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: 添加上游远程仓库
        run: |
          git remote add upstream https://github.com/Veloera/Veloera.git || echo "上游仓库已存在"
          git remote -v

      - name: 获取上游更新
        run: |
          git fetch upstream main
          git fetch origin main

      - name: 检查上游是否有新提交
        id: check_updates
        run: |
          # 获取本地main分支和上游main分支的最新提交哈希
          LOCAL_HASH=$(git rev-parse origin/main)
          UPSTREAM_HASH=$(git rev-parse upstream/main)
          
          echo "本地最新提交: $LOCAL_HASH"
          echo "上游最新提交: $UPSTREAM_HASH"
          
          if [ "$LOCAL_HASH" != "$UPSTREAM_HASH" ] || [ "${{ inputs.force_sync }}" == "true" ]; then
            echo "发现上游更新或强制同步"
            echo "has_updates=true" >> $GITHUB_OUTPUT
            
            # 获取上游新提交列表
            COMMITS=$(git log --oneline $LOCAL_HASH..$UPSTREAM_HASH | head -10)
            echo "upstream_commits<<EOF" >> $GITHUB_OUTPUT
            echo "$COMMITS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "没有发现上游更新"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: 同步上游更新
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          # 切换到main分支并合并上游更新
          git checkout main
          git merge upstream/main --no-edit
          
          # 推送更新到fork仓库（添加标识避免触发其他workflow）
          git push origin main

      - name: 创建同步报告
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          echo "## 🔄 上游同步完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**同步详情:**" >> $GITHUB_STEP_SUMMARY
          echo "- 同步时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- 上游仓库: \`Veloera/Veloera\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**新提交:**" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.check_updates.outputs.upstream_commits }}" ]; then
            echo '${{ steps.check_updates.outputs.upstream_commits }}' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          else
            echo "- 强制同步，无新提交" >> $GITHUB_STEP_SUMMARY
          fi

  auto-build:
    name: 自动构建更新后的代码
    needs: sync-upstream
    # 只在定时任务或手动触发且启用自动构建时才构建
    if: needs.sync-upstream.outputs.has_updates == 'true' && (github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.auto_build == true))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: write

    steps:
      - name: 检出更新后的代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 生成版本信息
        run: |
          if git describe --tags --exact-match HEAD 2>/dev/null; then
            echo "VERSION=$(git describe --tags)" >> $GITHUB_ENV
          else
            echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          fi
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: 登录到 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 设置小写仓库所有者
        id: lowercase
        run: echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: 生成镜像元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ steps.lowercase.outputs.owner }}/veloera
          tags: |
            type=raw,value=latest
            type=raw,value=upstream-sync-${{ env.VERSION }}
            type=raw,value=${{ env.VERSION }}

      - name: 构建并推送 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ env.VERSION }}
            BUILD_DATE=${{ env.BUILD_DATE }}
            BUILDKIT_INLINE_CACHE=1
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 构建完成通知
        run: |
          echo "## 🚀 自动构建完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**构建信息:**" >> $GITHUB_STEP_SUMMARY
          echo "- 触发原因: 上游更新同步" >> $GITHUB_STEP_SUMMARY
          echo "- 构建版本: \`${{ env.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- 构建时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- 镜像仓库: \`ghcr.io/${{ steps.lowercase.outputs.owner }}/veloera\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**镜像标签:**" >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.meta.outputs.tags }}' | sed 's/^/- `/' | sed 's/$/`/' >> $GITHUB_STEP_SUMMARY

  notify-no-updates:
    name: 无更新通知
    runs-on: ubuntu-latest
    needs: sync-upstream
    if: needs.sync-upstream.outputs.has_updates == 'false' && github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 无更新通知
        run: |
          echo "## ✅ 检查完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**结果:** 没有发现上游更新" >> $GITHUB_STEP_SUMMARY
          echo "- 检查时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- 上游仓库: \`Veloera/Veloera\`" >> $GITHUB_STEP_SUMMARY